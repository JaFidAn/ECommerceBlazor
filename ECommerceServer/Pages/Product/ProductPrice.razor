@page "/product/price/{Id:int}"
@inject IProductRepository _productRepository
@inject IProductPriceRepository _productProceRepository

<h3 class="card-title text-primary mb-3 ml-3">Product Price Management</h3>

@if (IsLoading)
{
    <div class="text-center">
        <img src="/images/Loading.gif" />
    </div>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.Name</h4>
                <span>Category : @Product.Category.Name</span><br />
                Description : <span>@((MarkupString)Product.Descripton)</span>
            </div>
        </div>
        <div class="col-1">
            <img src="@Product.ImageUrl" class="w-100" />
        </div>
    </div>

    <SfGrid @ref="productPriceGrid" DataSource="@ProductPrices" AllowPaging="true" AllowFiltering="true" AllowSorting="true"
    Toolbar="@(new List<string>{"Add", "Edit", "Update", "Delete", "Cancel"})">
        <GridEditSettings AllowAdding="true" AllowEditing="true" ShowDeleteConfirmDialog="true" AllowDeleting="true" />
        <GridEvents OnActionBegin="ActionHandler" TValue="ProductPriceDTO" />

        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu" />
        <GridSortSettings AllowUnsort="false">
            <GridSortColumns>
                <GridSortColumn Field="Price" Direction="SortDirection.Ascending" />
            </GridSortColumns>
        </GridSortSettings>

        <GridPageSettings PageSize="5" PageCount="5" PageSizes="true"></GridPageSettings>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" AllowAdding="false" Field=@nameof(ProductPriceDTO.Id) HeaderText="ID">
            </GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Size) HeaderText="Size">
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList DataSource="SizeList" TItem="string" TValue="string"
                    @bind-Value="((context as ProductPriceDTO).Size)">

                    </Syncfusion.Blazor.DropDowns.SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Price) HeaderText="Price" Format="C2"></GridColumn>
        </GridColumns>
    </SfGrid>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO Product { get; set; } = new();
    private IEnumerable<ProductPriceDTO> ProductPrices { get; set; } = new List<ProductPriceDTO>();
    private bool IsLoading { get; set; } = true;
    public SfGrid<ProductPriceDTO> productPriceGrid;

    IEnumerable<String> SizeList = new List<String>()
{
"Small", "Medium", "Large", "8oz", "16oz", "24oz"
};

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            Product = await _productRepository.Get(Id);
            ProductPrices = await _productProceRepository.GetAll(Id);
            IsLoading = false;
            StateHasChanged();
        }
    }

    public async void ActionHandler(ActionEventArgs<ProductPriceDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                args.Data.ProductId = Id;
                await _productProceRepository.Create(args.Data);
                ProductPrices = await _productProceRepository.GetAll(Id);
                await productPriceGrid.Refresh();
            }
            if (args.Action == "Edit")
            {
                args.Data.ProductId = Id;
                await _productProceRepository.Update(args.Data);
            }
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await _productProceRepository.Delete(args.Data.Id);
            await productPriceGrid.Refresh();
        }
    }
}
